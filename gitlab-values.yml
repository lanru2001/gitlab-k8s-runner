#gitlab k8s helm

## GitLab Runner Image
## By default it's using registry.gitlab.com/gitlab-org/gitlab-runner:alpine-v{VERSION}
## where {VERSION} is taken from Chart.yaml from appVersion field
## ref: https://gitlab.com/gitlab-org/gitlab-runner/container_registry/29383?orderBy=NAME&sort=asc&search[]=alpine-v&search[]=
#
## Note: If you change the image to the ubuntu release
##       don't forget to change the securityContext;
##       these images run on different user IDs.
image:
  registry: registry.gitlab.com
  image: gitlab-org/gitlab-runner
  #tag: alpine-v11.6.0

## When using GitLab Runner Helm Chart with gitlab-runner-ubi-images (https://gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/container_registry)
## the installation fails because dumb-init is not packaged in the image. However, the tini is present.
## This configuration will allow gitlab-runner-ubi-images users to explicitly enabled the use of `tini` instead of `dumb-init`
useTini: false

imagePullPolicy: IfNotPresent

## Timeout, in seconds, for liveness and readiness probes of a runner pod.
probeTimeoutSeconds: 1

## to create multiple runner replicas.
#replicas: 5
## The GitLab Server URL (with protocol) that want to register the runner against
## ref: https://docs.gitlab.com/runner/commands/index.html#gitlab-runner-register
##
gitlabUrl: https://gitlab.com/
runnerRegistrationToken: ""
terminationGracePeriodSeconds: 3600

concurrent: 10
checkInterval: 30
sessionServer:
  enabled: false
  # annotations: {}
  # timeout: 1800
  # internalPort: 8093
  # externalPort: 9000
  # publicIP: ""
  # loadBalancerSourceRanges:
  #   - 1.2.3.4/32

## For RBAC support:
# rbac:
#   create: true
#   rules: 
#    - resources: ["configmaps", "pods", "pods/attach", "secrets", "services"]
#      verbs: ["get", "list", "watch", "create", "patch", "update", "delete"]
#    - apiGroups: [""]
#      resources: ["pods/exec"]
#      verbs: ["create", "patch", "delete"]

  ## Run the gitlab-bastion container with the ability to deploy/manage containers of jobs
  ## cluster-wide or only within namespace
  clusterWideAccess: false

  ## Use podSecurity Policy
  ## ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  podSecurityPolicy:
    enabled: false
    resourceNames:
    - gitlab-runner

metrics:
  enabled: false

  ## Define a name for the metrics port
  ##
  portName: metrics
  port: 9252
  serviceMonitor:
    enabled: false

## Configure a service resource e.g., to allow scraping metrics via
## prometheus-operator serviceMonitor
service:
  enabled: false
  type: ClusterIP

## Configuration for the Pods that the runner launches for each new job
##
runners:
  # runner configuration, where the multi line strings is evaluated as
  # template so you can specify helm values inside of it.
  #
  # tpl: https://helm.sh/docs/howto/charts_tips_and_tricks/#using-the-tpl-function
  # runner configuration: https://docs.gitlab.com/runner/configuration/advanced-configuration.html
  config: |
    [[runners]]
       name = "kube-runner"
       url = "https://git.nav.com"
       token = "H-Gxiqk7yyMx4sy8LfGx"
       executor = "kubernetes"
       [runners.kubernetes]
         image = "registry.nav.engineering/goldmaster/kubectl:master"
         pull_policy = "always"
         namespace = "gitlab"
         privileged = true
         poll_interval = 5
         service_account = "default"
         cpus = "750m"
         memory = "256m"
         service_cpus = "1000m"
         service_memory = "512m"
         [runners.kubernetes.node_selector]
           type = "node"
           [[runners.kubernetes.volumes.host_path]]
            name = "docker-socket"
            mount_path = "/var/run/docker.sock"
            host_path = "/var/run/docker.sock"
            read_only = true


  ## Which executor should be used
  ##
  # executor: kubernetes

  ## Specify whether the runner should be locked to a specific project: true, false. Defaults to true.
  ##
  # locked: true

  ## Specify the tags associated with the runner. Comma-separated list of tags.
  ##
  ## ref: https://docs.gitlab.com/ee/ci/runners/configure_runners.html#use-tags-to-control-which-jobs-a-runner-can-run
  ##
  tags: "kube-runner"

  ## Specify the name for the runner.
  ##
  name: "kube-runner"

  ## Specify the maximum timeout (in seconds) that will be set for job when using this Runner
  ##
  # maximumTimeout: ""

  ## Specify if jobs without tags should be run.
  ## If not specified, Runner will default to true if no tags were specified. In other case it will
  ## default to false.
  ##
  ## ref: https://docs.gitlab.com/ee/ci/runners/configure_runners.html#set-a-runner-to-run-untagged-jobs
  ##
  # runUntagged: true

  ## Specify whether the runner should only run protected branches.
  ## Defaults to false.
  ##
  ## ref: https://docs.gitlab.com/ee/ci/runners/configure_runners.html#prevent-runners-from-revealing-sensitive-information
  ##
  # protected: true

  ## The name of the secret containing runner-token and runner-registration-token
  # secret: gitlab-runner

## Specify the name of the scheduler which used to schedule runner pods.
## Kubernetes supports multiple scheduler configurations.
## ref: https://kubernetes.io/docs/reference/scheduling
# schedulerName: "my-custom-scheduler"

## Configure securitycontext for the main container
## ref: http://kubernetes.io/docs/user-guide/security-context/

privileged: false

podSecurityContext:
  runAsUser: 100
  # runAsGroup: 65533
  fsGroup: 65533

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources: {}
  # limits:
  #   memory: 256Mi
  #   cpu: 200m
  # requests:
  #   memory: 128Mi
  #   cpu: 100m

hpa: 
   minReplicas: 4
   maxReplicas: 5
   metrics:
   - type: Pods
     pods:
       metricName: gitlab_runner_jobs
       targetAverageValue: 400m

## Configure priorityClassName for manager pod. See k8s docs for more info on how pod priority works:
##  https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
priorityClassName: ""

configMaps: {}
